<div id="TabbedPanels1" class="TabbedPanels">
  <ul class="TabbedPanelsTabGroup">
    <li class="TabbedPanelsTab" tabindex="1">1. Payment Details</li>
    <li class="TabbedPanelsTab TabbedPanelsTabSelected" tabindex="0">2. Upload Video</li>
    </ul>

    <div class="TabbedPanelsContentGroup">
      <div class="TabbedPanelsContent">
        <div id="wait" class="txt-grn">
          <%= image_tag 'loader-new.gif', :class => "imgl-center" %>
          Please wait your video is uploading.
        </div>
        <div class="tab_content col-xs-12">
          <%= nested_form_for @order, url: wizard_path, method: :put, :class => "col-xs-12" do |f| %>
            <% if @order.errors.any? %>
              <div id="error_explanation">
                <!-- <h2><%#= pluralize(@order.errors.count, "error") %> prohibited this order from being saved:</h2> -->
                <ul>
                  <% @order.errors.full_messages.each do |message| %>
                    <li class="error_div"><%= message %></li>
                  <% end %>
                </ul>
              </div>
            <% end %>
            <ul class="col-xs-12">
              <div class="col-xs-12 col-sm-1"></div>

              <div class="col-xs-12 col-sm-10">

                <li>
                  <h2 class="pull-left">Title</h2>
                  <span class="box">
                    <%= image_tag "icons/title.png" %>
                    <%= f.text_field :title %>
                  </span>
                </li>

                <li>
                  <h2 class="pull-left">Videos</h2>
                  <span class="box">
                    <%#= f.fields_for :videos do |video| %>
                      <%= image_tag"icons/video.png" %>
                      <input id="uploadFile1" placeholder="Select the first half or entire game to upload" disabled="disabled" />
                      <div class="fileUpload btn btn-primary">
                        <span>Upload</span>
                        <input id="uploadBtn" type="file" class="upload" />
                        <%= f.file_field :video_url, :id => "uploadBtn1", :data => {:value => "upload1"}, :class => "upload", :name => "order[videos_attributes][0][video_url]" , :placeholder => "Select the first half or entire game to upload", :onclick => "change_file1();" %>
                      </div>
                    <%# end %>
                  </span>
                  <div id="error_msg1" class="error_msg">Invalid file type, please upload only video file.</div>
                  <div id="progress1">
                    <div class="bar" style="width: 0%;"></div>
                  </div>
                </li>

                <li>
                  <!-- <h2 class="pull-left">Videos</h2> -->
                  <span class="box">
                    <%#= f.fields_for :videos, :id => "second_video" do |video| %>
                      <%= image_tag"icons/video.png" %>
                      <input id="uploadFile2" placeholder="Select the second half to upload (if applicable)" disabled="disabled" />
                      <div class="fileUpload btn btn-primary">
                        <span>Upload</span>
                        <input id="uploadBtn" type="file" class="upload" />
                        <%= f.file_field :video_url, :id => "uploadBtn2", :data => {:value => "upload2"}, :class => "upload", :name => "order[videos_attributes][1][video_url]", :placeholder => "Select the second half to upload (if applicable)", :onclick => "change_file2();" %>
                      </div>
                    <%# end %>
                  </span>
                  <div id="error_msg2" class="error_msg">Invalid file type, please upload only video file.</div>
                  <div id="progress2">
                    <div class="bar1" style="width: 0%;"></div>
                  </div>
                </li>

                <li>
                  <h2 class="pull-left">Description</h2>
                  <span class="box">
                    <%= image_tag "icons/description.png", :class => "pull-left" %>
                    <%= f.text_area :description, :placeholder => "Please include your jersey color,jersey number,and any other relevant information that will help us recognize you on the field." %>
                  </span>
                </li>

                <div class="col-xs-12 col-sm-4"></div>
                <div class="col-xs-12 col-sm-4">
                  <li>
                    <button id="upload" type="submit"><i class="fa fa-check" aria-hidden="true"></i> Upload Video</button>
                  </li>
                </div>
                <div class="col-xs-12 col-sm-4"></div>
              </div>
              <div class="col-xs-12 col-sm-1"></div>
            </ul>
          <% end %>
        </div>
      </div>
    </div>
  </ul>
</div>


<script type="text/javascript">
  $(document).ready(function() {
    $("#error_msg1").hide();
    $("#error_msg2").hide();
    $("#wait").css("display", "none");
    if ($("#uploadBtn1").val() == "" || $("#uploadBtn2").val() == ""){
      $("#upload").attr("disabled", true);
    }
    // var fieldsCount,
    // maxFieldsCount = 1,
    // $addLink = $('a.add_nested_fields');

    // var mfieldsCount,
    // minFieldsCount = 0, // placed at 0 because first object is auto built from controller
    // $removeLink = $('a.remove_nested_fields');

    // function toggleAddLink() {
    //   $addLink.toggle(fieldsCount <= maxFieldsCount)
    // }

    // function toggleRemoveLink() {
    //   $removeLink.toggle(mfieldsCount <= minFieldsCount)
    // }

    // $(document).on('nested:fieldAdded', function() {
    //   fieldsCount += 1;
    //   toggleAddLink();
    // });

    // $(document).on('nested:fieldRemoved', function() {
    //   fieldsCount -= 1;
    //   toggleAddLink();
    // });

    // $(document).on('nested:fieldRemoved', function() {
    //   mfieldsCount -= 0;
    //   toggleRemoveLink();
    // });

    // // count existing nested fields after page was loaded
    // fieldsCount = $('form .fields').length;
    // toggleAddLink();

    // mfieldsCount = $('form .fields').length;
    // toggleRemoveLink();

    $('.field_with_errors').contents().unwrap();

  });

  var video1_ext = '';
  var video2_ext = '';
  function change_file1(){
    document.getElementById("uploadBtn1").onchange = function () {
      document.getElementById("uploadFile1").value = this.value.replace(/^C:\\fakepath\\/i, '');
      video1_ext = this.value.replace(/^C:\\fakepath\\/i, '');
      extentions = video1_ext.split(".")

      if (extentions[extentions.length-1] != "webm" && extentions[extentions.length-1] != "mkv" && extentions[extentions.length-1] != "flv" && extentions[extentions.length-1] != "vob" && extentions[extentions.length-1] != "ogv" && extentions[extentions.length-1] != "ogg" && extentions[extentions.length-1] != "drc" && extentions[extentions.length-1] != "gif" && extentions[extentions.length-1] != "gifv" && extentions[extentions.length-1] != "mng" && extentions[extentions.length-1] != "avi" && extentions[extentions.length-1] != "mov" && extentions[extentions.length-1] != "qt" && extentions[extentions.length-1] != "wmv" && extentions[extentions.length-1] != "yuv" && extentions[extentions.length-1] != "rm" && extentions[extentions.length-1] != "rmvb" && extentions[extentions.length-1] != "asf" && extentions[extentions.length-1] != "amv" && extentions[extentions.length-1] != "mp4" && extentions[extentions.length-1] != "m4p" && extentions[extentions.length-1] != "m4v" && extentions[extentions.length-1] != "mpg" && extentions[extentions.length-1] != "mp2" && extentions[extentions.length-1] != "mpeg" && extentions[extentions.length-1] != "mpe" && extentions[extentions.length-1] != "mpv" && extentions[extentions.length-1] != "mpg" && extentions[extentions.length-1] != "mpeg" && extentions[extentions.length-1] != "m2v" && extentions[extentions.length-1] != "svi" && extentions[extentions.length-1] != "3gp" && extentions[extentions.length-1] != "3g2" && extentions[extentions.length-1] != "mxf" && extentions[extentions.length-1] != "roq" && extentions[extentions.length-1] != "nsv" && extentions[extentions.length-1] != "f4v" && extentions[extentions.length-1] != "f4p" && extentions[extentions.length-1] != "f4a" && extentions[extentions.length-1] != "f4b") {
        $("#error_msg1").show();
        //$("#upload").attr("disabled", true);
      } else if(video1_ext == ''){
        $("#error_msg1").hide();
        //$("#upload").attr("disabled", true);
      } else{
        $("#error_msg1").hide();
        //$("#upload").attr("disabled", false);
      }
      enable_btn();
    };
  }

  function change_file2(){
    document.getElementById("uploadBtn2").onchange = function () {
      document.getElementById("uploadFile2").value = this.value.replace(/^C:\\fakepath\\/i, '');
      video2_ext = this.value.replace(/^C:\\fakepath\\/i, '');
      extentions = video2_ext.split(".")

      if (extentions[extentions.length-1] != "webm" && extentions[extentions.length-1] != "mkv" && extentions[extentions.length-1] != "flv" && extentions[extentions.length-1] != "vob" && extentions[extentions.length-1] != "ogv" && extentions[extentions.length-1] != "ogg" && extentions[extentions.length-1] != "drc" && extentions[extentions.length-1] != "gif" && extentions[extentions.length-1] != "gifv" && extentions[extentions.length-1] != "mng" && extentions[extentions.length-1] != "avi" && extentions[extentions.length-1].toLowerCase() != "mov" && extentions[extentions.length-1] != "qt" && extentions[extentions.length-1] != "wmv" && extentions[extentions.length-1] != "yuv" && extentions[extentions.length-1] != "rm" && extentions[extentions.length-1] != "rmvb" && extentions[extentions.length-1] != "asf" && extentions[extentions.length-1] != "amv" && extentions[extentions.length-1] != "mp4" && extentions[extentions.length-1] != "m4p" && extentions[extentions.length-1] != "m4v" && extentions[extentions.length-1] != "mpg" && extentions[extentions.length-1] != "mp2" && extentions[extentions.length-1] != "mpeg" && extentions[extentions.length-1] != "mpe" && extentions[extentions.length-1] != "mpv" && extentions[extentions.length-1] != "mpg" && extentions[extentions.length-1] != "mpeg" && extentions[extentions.length-1] != "m2v" && extentions[extentions.length-1] != "svi" && extentions[extentions.length-1] != "3gp" && extentions[extentions.length-1] != "3g2" && extentions[extentions.length-1] != "mxf" && extentions[extentions.length-1] != "roq" && extentions[extentions.length-1] != "nsv" && extentions[extentions.length-1] != "f4v" && extentions[extentions.length-1] != "f4p" && extentions[extentions.length-1] != "f4a" && extentions[extentions.length-1] != "f4b") {
        $("#error_msg2").show();
        //$("#upload").attr("disabled", true);
      } else if(video2_ext == ''){
        $("#error_msg2").hide();
        //$("#upload").attr("disabled", true);
      } else{
        $("#error_msg2").hide();
        //$("#upload").attr("disabled", false);
      }
      enable_btn();
    };
  }

  function enable_btn(){
    if(video1_ext != "" && video2_ext != "") {
      extention1 = video1_ext.split(".")
      extention2 = video2_ext.split(".")

      if ((extention1[extention1.length-1] == "webm" || extention1[extention1.length-1] == "mkv" || extention1[extention1.length-1] == "flv" || extention1[extention1.length-1] == "vob" || extention1[extention1.length-1] == "ogv" || extention1[extention1.length-1] == "ogg" || extention1[extention1.length-1] == "drc" || extention1[extention1.length-1] == "gif" || extention1[extention1.length-1] == "gifv" || extention1[extention1.length-1] == "mng" || extention1[extention1.length-1] == "avi" || extention1[extention1.length-1] == "mov" || extention1[extention1.length-1] == "qt" || extention1[extention1.length-1] == "wmv" || extention1[extention1.length-1] == "yuv" || extention1[extention1.length-1] == "rm" || extention1[extention1.length-1] == "rmvb" || extention1[extention1.length-1] == "asf" || extention1[extention1.length-1] == "amv" || extention1[extention1.length-1] == "mp4" || extention1[extention1.length-1] == "m4p" || extention1[extention1.length-1] == "m4v" || extention1[extention1.length-1] == "mpg" || extention1[extention1.length-1] == "mp2" || extention1[extention1.length-1] == "mpeg" || extention1[extention1.length-1] == "mpe" || extention1[extention1.length-1] == "mpv" || extention1[extention1.length-1] == "mpg" || extention1[extention1.length-1] == "mpeg" || extention1[extention1.length-1] == "m2v" || extention1[extention1.length-1] == "svi" || extention1[extention1.length-1] == "3gp" || extention1[extention1.length-1] == "3g2" || extention1[extention1.length-1] == "mxf" || extention1[extention1.length-1] == "roq" || extention1[extention1.length-1] == "nsv" || extention1[extention1.length-1] == "f4v" || extention1[extention1.length-1] == "f4p" || extention1[extention1.length-1] == "f4a" || extention1[extention1.length-1] == "f4b") && (extention2[extention2.length-1] == "webm" || extention2[extention2.length-1] == "mkv" || extention2[extention2.length-1] == "flv" || extention2[extention2.length-1] == "vob" || extention2[extention2.length-1] == "ogv" || extention2[extention2.length-1] == "ogg" || extention2[extention2.length-1] == "drc" || extention2[extention2.length-1] == "gif" || extention2[extention2.length-1] == "gifv" || extention2[extention2.length-1] == "mng" || extention2[extention2.length-1] == "avi" || extention2[extention2.length-1] == "mov" || extention2[extention2.length-1] == "qt" || extention2[extention2.length-1] == "wmv" || extention2[extention2.length-1] == "yuv" || extention2[extention2.length-1] == "rm" || extention2[extention2.length-1] == "rmvb" || extention2[extention2.length-1] == "asf" || extention2[extention2.length-1] == "amv" || extention2[extention2.length-1] == "mp4" || extention2[extention2.length-1] == "m4p" || extention2[extention2.length-1] == "m4v" || extention2[extention2.length-1] == "mpg" || extention2[extention2.length-1] == "mp2" || extention2[extention2.length-1] == "mpeg" || extention2[extention2.length-1] == "mpe" || extention2[extention2.length-1] == "mpv" || extention2[extention2.length-1] == "mpg" || extention2[extention2.length-1] == "mpeg" || extention2[extention2.length-1] == "m2v" || extention2[extention2.length-1] == "svi" || extention2[extention2.length-1] == "3gp" || extention2[extention2.length-1] == "3g2" || extention2[extention2.length-1] == "mxf" || extention2[extention2.length-1] == "roq" || extention2[extention2.length-1] == "nsv" || extention2[extention2.length-1] == "f4v" || extention2[extention2.length-1] == "f4p" || extention2[extention2.length-1] == "f4a" || extention2[extention2.length-1] == "f4b")) {
        $("#upload").attr("disabled", false);
      } else {
        $("#upload").attr("disabled", true);
      }
    }
    if(video1_ext == "" && video2_ext == ""){
      $("#upload").attr("disabled", true);
    }
  }

</script>

<script type="text/javascript">
  $("#upload").click(function() {
    $(this).html("Uploading Please Wait....")
    //var browser_name = Object.keys(jQuery.browser)[2]
    var browser_arr = jQuery.browser
    var browser_name = browser_arr
    console.log(browser_name);
    console.log(browser_name.safari);
    if(browser_name.safari){
      console.log("in if part");
      $("#wait").css("display", "block");
    }else{
      //development
      //var bucket = new AWS.S3({params: {Bucket: 'football-video-review-dev'}});

      //production
      var bucket = new AWS.S3({params: {Bucket: 'football-video-review-production'}});

      var fileChooser1 = document.getElementById('uploadBtn1');
      var file1 = fileChooser1.files[0];

      var fileChooser2 = document.getElementById('uploadBtn2');
      var file2 = fileChooser2.files[0];

      var files = []
      files.push(file1)
      files.push(file2)

      if(files[0]){
        var params1 = {Key: files[0].name, ContentType: files[0].type, Body: files[0]};
        bucket.upload(params1).on('httpUploadProgress', function(evt) {
          var progress;
          console.log(evt.loaded + " of " + evt.total + " bytes_1");
          progress = Math.round(evt.loaded / evt.total * 100)
          console.log(progress)
          updateProgress1(progress);
        }).send();
      }

      function updateProgress1(percent) {
        $('#progress1 .bar').css(
          'width', percent + '%'
        );
        $('#progress1 .bar').html(
          percent + '%'
          //parseInt((progress.loaded/progress.total)*100) + '%'
        );
      }

      if(files[1]){
        var params2 = {Key: files[1].name, ContentType: files[1].type, Body: files[1]};
        bucket.upload(params2).on('httpUploadProgress', function(evt) {
          var progress;
          console.log(evt.loaded + " of " + evt.total + " bytes_2");
          progress = Math.round(evt.loaded / evt.total * 100)
          updateProgress2(progress);
        }).send();
      }

      function updateProgress2(percent) {
        $('#progress2 .bar1').css(
          'width', percent + '%'
        );
        $('#progress2 .bar1').html(
          percent + '%'
          //parseInt((progress.loaded/progress.total)*100) + '%'
        );
      }

    }
    // if(browser_name != "safari"){
    //   //development
    //   //var bucket = new AWS.S3({params: {Bucket: 'football-video-review-dev'}});

    //   //production
    //   var bucket = new AWS.S3({params: {Bucket: 'football-video-review-production'}});

    //   var fileChooser1 = document.getElementById('uploadBtn1');
    //   var file1 = fileChooser1.files[0];

    //   var fileChooser2 = document.getElementById('uploadBtn2');
    //   var file2 = fileChooser2.files[0];

    //   var files = []
    //   files.push(file1)
    //   files.push(file2)

    //   if(files[0]){
    //     var params = {Key: files[0].name, ContentType: files[0].type, Body: files[0]};
    //     var request = bucket.putObject(params);
    //     request.on('httpUploadProgress', function (progress) {
    //       console.log(progress.loaded + " of " + progress.total + " bytes");
    //       $('#progress1 .bar').css(
    //         'width',
    //         parseInt(((progress.loaded+150)*100)/(progress.total+150)) + '%'
    //       );
    //       $('#progress1 .bar').html(
    //         parseInt(((progress.loaded+150)*100)/(progress.total+150)) + '%'
    //       );
    //     });
    //     request.send();
    //   }

    //   if(files[1]){
    //     var params = {Key: files[1].name, ContentType: files[1].type, Body: files[1]};
    //     var request = bucket.putObject(params);
    //     request.on('httpUploadProgress', function (progress) {
    //       console.log(progress.loaded + " of " + progress.total + " bytes");
    //       $('#progress2 .bar').css(
    //         'width',
    //         parseInt(((progress.loaded+150)*100)/(progress.total+150)) + '%'
    //       );
    //       $('#progress2 .bar').html(
    //         parseInt(((progress.loaded+150)*100)/(progress.total+150)) + '%'
    //       );
    //     });
    //     request.send();
    //   }
    // }else{
    //   $("#wait").css("display", "block");
    // }
  });
</script>